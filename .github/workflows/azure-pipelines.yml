name: Terraform + .NET ZIP Deploy

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: ./terraform
  DOTNET_VERSION: "8.0.x"
  PROJECT_PATH: terraform/appServiceSlot/SlotDemo
  # PROJECT_PATH1: terraform/appServiceSlot/appServiceSlot/SlotDemo
  PROJECT_FILE: SlotDemo.csproj
jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.8.5"

      - name: Azure Login
        uses: azure/login@v2
        with:
           client-id: ${{ secrets.AZURE_CLIENT_ID }}
           client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
           auth-type: service_principal

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-output
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
         echo "Fetching Terraform outputs..."
    
         webapp_name=$(terraform output -raw webapp_name | tr -d '\r\n')
         slot_name=$(terraform output -raw slot_name | tr -d '\r\n')
         resource_group_name=$(terraform output -raw resource_group_name | tr -d '\r\n')

         echo "WEBAPP_NAME=$webapp_name" >> $GITHUB_ENV
         echo "WEBAPP_SLOT=$slot_name" >> $GITHUB_ENV
         echo "WEBAPP_RG=$resource_group_name" >> $GITHUB_ENV

         echo "WEBAPP_NAME: $webapp_name"
         echo "WEBAPP_SLOT: $slot_name"
         echo "WEBAPP_RG: $resource_group_name"

      # - name: Get Terraform Outputs
      #   id: tf-output
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      #   run: |
      #     echo "WEBAPP_NAME=$(terraform output -raw webapp_name | tr -d '\r\n')" >> $GITHUB_ENV
      #     echo "WEBAPP_SLOT=$(terraform output -raw slot_name | tr -d '\r\n')" >> $GITHUB_ENV
      #     echo "WEBAPP_RG=$(terraform output -raw resource_group_name | tr -d '\r\n')" >> $GITHUB_ENV
      # - name: Check installed .NET Versions
      #   run: dotnet --list-sdks

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # - name: Check folder structure
      #   run: |
      #    echo "Current directory:"
      #    pwd
      #    echo "Files:"
      #    ls -R

      - name: Restore & Build .NET App
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
         PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
         echo "‚úÖ Using project file: $PROJECT_FILE"
    
         dotnet restore "$PROJECT_FILE"
         dotnet publish "$PROJECT_FILE" -c Release -o ../../publish

      - name: Create ZIP package
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
         echo "üìç Current location: $(pwd)"
         ls -R bin/Release/net8.0/
         zip -r ../appServiceSlot.zip bin/Release/net8.0/publish
         ls -lh ../appServiceSlot.zip

      # - name: Create ZIP package
      #   working-directory: ${{ env.PROJECT_PATH }}
      #   run: |
      #    echo "üìç Current location: $(pwd)"
      #    ls -R
      #    zip -r appServiceSlot.zip publish

      # - name: Create ZIP package
      #   working-directory: ${{ env.PROJECT_PATH1 }}
      #   run: |
      #    cd publish
      #    zip -r ../appServiceSlot.zip
      #    cd ..


      # - name: Zip output
      #   run: |
      #     cd publish
      #     zip -r ../appServiceSlot.zip
      #     cd ..

      # - name: Deploy ZIP to Slot
      #   uses: azure/webapps-deploy@v3
      #   with:
      #     app-name: ${{ env.WEBAPP_NAME }}
      #     slot-name: ${{ env.WEBAPP_SLOT }}
      #     package: appServiceSlot.zip
      
      - name: Deploy to Azure App Service Slot
        uses: azure/webapps-deploy@v3
        with:
           app-name: ${{ env.WEBAPP_NAME }}
           slot-name: ${{ env.WEBAPP_SLOT }}
           resource-group-name: ${{ env.WEBAPP_RG }}
           package: appServiceSlot.zip


      - name: Smoke Test
        run: |
          curl -fS https://${{ env.WEBAPP_NAME }}-${{ env.WEBAPP_SLOT }}.azurewebsites.net || exit 1

      - name: Swap Slots
        run: |
          az webapp deployment slot swap \
          --resource-group ${{ env.resource_group_name }} \
          --name ${{ env.WEBAPP_NAME }} \
          --slot ${{ env.WEBAPP_SLOT }} \
          --target-slot production
